---
# as SSH login by root or by password in general are both disabled (see tasks in
# ../../common/tasks/sshd.yml), the following password is set only for emergency
# access to the console (e.g. via Linode web UI)
- name: set password for root user (at console)
  user:
    name: root
    password: "{{ root_console_password | password_hash('sha512', root_console_password_salt) }}"

- name: Create developers plus any extra groups
  group:
    name: "{{ item }}"
    state: present
  with_items: "{{ base_groups }} + [ 'developers' ]"

# based on https://serverfault.com/a/913211/319087
- name: Create users and add to developers and maybe sudo groups
  user:
    name: "{{ item.username }}"
    shell: /bin/bash
    # this groups: attribute will replace any existing groups for the user
    groups: "{{ item.extra_groups }}, developers{{', sudo' if (item.username in sudoers) else '' }}"
  with_items: "{{ users }}"

- name: Get list of users currently in developers group
  shell: |
    set -o pipefail
    grep developers /etc/group |
    cut -d: -f4 |
    tr "," "\n"
  changed_when: false
  register: existing_users
  args:
    # for pipefail info, see https://github.com/ansible/ansible-lint/issues/497#issuecomment-477141267
    executable: /bin/bash

- name: Determine removed users
  set_fact:
    users_to_remove: "{{ existing_users.stdout_lines | difference(users | map(attribute='username') | list) }}"
  when: existing_users.stdout_lines is defined

- name: Delete removed user accounts
  user:
    name: "{{ item }}"
    state: absent
  with_items: "{{ users_to_remove }}"
  when: users_to_remove is defined

- name: Allow passwordless sudo for members of sudo group
  lineinfile:
    path: /etc/sudoers
    state: present
    regexp: '^%sudo\s'
    line: '%sudo ALL=(ALL) NOPASSWD: ALL'
    validate: 'visudo -cf %s'

# https://serverfault.com/a/118932/319087
- name: prevent sudo from breaking ssh forwarding
  lineinfile:
    dest: /etc/sudoers
    line: Defaults    env_keep+=SSH_AUTH_SOCK
    validate: 'visudo -cf %s'

- name: Add authorized keys for each user
  authorized_key:
    user: "{{ item.0.username }}"
    key: "{{ lookup('file', '{{ playbook_dir }}/files/users/{{ item.0.username }}/{{ item.1 }}') }}"
  with_subelements:
    - "{{ users }}"
    - pub_keys

- name: ensure directories for custom files exist
  file:
    state: directory
    path: "/home/{{ item.0.username }}/{{ item.1 | dirname }}"
    owner: "{{ item.0.username }}"
    group: "{{ item.0.username }}"
  loop: "{{ users | subelements('custom_homedir_files', 'skip_missing=False') }}"

- name: copy user files from playbook_dir to user home dir
  copy:
    src: "{{ playbook_dir }}/files/users/{{ item.0.username }}/{{ item.1 }}"
    dest: "/home/{{ item.0.username }}/{{ item.1 }}"
    owner: "{{ item.0.username }}"
    group: "{{ item.0.username }}"
  loop: "{{ users | subelements('custom_homedir_files', 'skip_missing=False') }}"

- name: "load global files from user's bashrc"
  blockinfile:
    path: "/home/{{ item.username }}/.bashrc"
    owner: "{{ item.username }}"
    group: "{{ item.username }}"
    mode: 0755
    block: |
      for file in /etc/bashrc.d/*;
      do
      source "$file"
      done
  with_items: "{{ users }}"

- name: Let users add custom content to files in their home dir
  blockinfile:
    path: "/home/{{ item.0.username }}/{{ item.1.path }}"
    block: "{{ item.1.content }}"
    marker: "# {mark} ANSIBLE MANAGED BLOCK{{ item.1.marker | default('') }}"
    create: yes
  with_subelements:
    - "{{ users }}"
    - custom_homedir_content
    - skip_missing: yes

- name: Fix permissions on custom content
  file:
    path: "/home/{{ item.0.username }}/{{ item.1.path | dirname }}"
    owner: "{{ item.0.username }}"
    group: "{{ item.0.username }}"
    recurse: yes
  with_subelements:
    - "{{ users }}"
    - custom_homedir_content
    - skip_missing: yes
